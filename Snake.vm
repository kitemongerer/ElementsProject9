function Snake.new 1
push constant 4
call Memory.alloc 1
pop pointer 0
push constant 30
push constant 16
push constant 0
call Segment.new 3
pop this 0
push this 0
pop this 1
push constant 0
pop this 2
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push constant 5
lt
not
if-goto WHILE_END0
push this 1
push constant 30
push local 0
add
push constant 16
push constant 0
call Segment.new 3
call Segment.add 2
pop temp 0
push this 1
call Segment.next 1
pop this 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Snake.hasEaten 0
push argument 0
pop pointer 0
push this 3
return
function Snake.isAlive 0
push argument 0
pop pointer 0
push this 2
not
return
function Snake.overlap 2
push argument 0
pop pointer 0
push constant 0
pop local 0
push this 0
pop local 1
label WHILE_EXP0
push local 1
push constant 0
eq
not
not
if-goto WHILE_END0
push local 0
push local 1
push argument 1
call Segment.collide 2
or
pop local 0
push local 1
call Segment.next 1
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Snake.drawSnake 1
push argument 0
pop pointer 0
push this 0
pop local 0
push local 0
call Segment.draw 1
pop temp 0
push local 0
call Segment.next 1
pop local 0
label WHILE_EXP0
push local 0
push constant 0
eq
not
not
if-goto WHILE_END0
push this 2
push local 0
push this 0
call Segment.collide 2
or
pop this 2
push local 0
call Segment.draw 1
pop temp 0
push local 0
call Segment.next 1
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Snake.move 3
push argument 0
pop pointer 0
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop this 3
push argument 1
push constant 87
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
pop local 1
goto IF_END0
label IF_FALSE0
push argument 1
push constant 65
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
neg
pop local 0
goto IF_END1
label IF_FALSE1
push argument 1
push constant 83
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
pop local 1
goto IF_END2
label IF_FALSE2
push constant 1
pop local 0
label IF_END2
label IF_END1
label IF_END0
push this 0
call Segment.getX 1
push local 0
add
push this 0
call Segment.getY 1
push local 1
add
push this 0
call Segment.new 3
pop local 2
push local 2
call Segment.getX 1
push constant 1
neg
gt
push local 2
call Segment.getY 1
push constant 1
neg
gt
and
push local 2
call Segment.getX 1
push constant 64
lt
and
push local 2
call Segment.getY 1
push constant 32
lt
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 2
push this 0
call Segment.add 2
pop temp 0
push local 2
pop this 0
goto IF_END3
label IF_FALSE3
push constant 1
neg
pop this 2
push local 2
call Segment.dispose 1
pop temp 0
label IF_END3
push argument 2
push local 2
call Segment.collide 2
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 1
neg
pop this 3
goto IF_END4
label IF_FALSE4
push this 1
call Segment.previous 1
pop local 2
push local 2
push constant 0
call Segment.setNext 2
pop temp 0
push this 1
call Segment.dispose 1
pop temp 0
push local 2
pop this 1
label IF_END4
push constant 0
return
