class Segment {

	static int size;

	field int x;
	field int y;
	field Segment next;
	field Segment previous;

	/** Constructs a new snake */
	constructor Segment new(int xNew, int yNew, Segment nextSeg) {
		let size = 8;

		let x = xNew;
		let y = yNew;

		let next = nextSeg;
		let previous = null;

		return this;
	}

	method void setX(int xNew) {
		let x = xNew;
		return;
	}

	method void setY(int yNew) {
		let y = yNew;
		return;
	}

	method int getX() {
		return x;
	}

	method int getY() {
		return y;
	}


	method void draw() {
		do Screen.drawRectangle(x * size + 1, y * size + 1, x * size + size - 1, y * size + size - 1);
		return;
	}

	method Segment next() {
		return next;
	}

	method Segment previous() {
		return previous;
	}

	method void add(Segment nextSeg) {
		let next = nextSeg;
		do nextSeg.setPrevious(this);
		return;
	}

	method void setNext(Segment nextSeg) {
		let next = nextSeg;
		return;
	}

	method void setPrevious(segment prevSeg) {
		let previous = prevSeg;
		return;
	}

	method boolean collide(Segment tmp) {
		if (~(tmp = null)){
			if ( (tmp.getX() = x) & (tmp.getY() = y) ) {
				return -1;
			} else {
				return 0;
			}
		} else {
			return 0;
		}
	}

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

	
}