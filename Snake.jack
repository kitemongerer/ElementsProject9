class Snake {

	field Segment snakeHead;
	field Segment snakeTail;
	field bool isDead;
	field bool ateFood;

	/** Constructs a new snake */
	constructor Snake new(char direction) {
		var int i;

		// Create snake head
		let snakeHead = Segment.new(30, 16, null);
		let snakeTail = snakeHead;
		let isDead = 0;
		let i = 1;

		// Create the rest of the snake
		while(i < 5) {
			do move(direction, null);
			let i = i + 1;
		}

		return this;
	}

	// Sees if snake ate food last time it moved
	method bool hasEaten() {
		return ateFood;
	}

	// Checks if snake is still alive
	method bool isAlive() {
		return ~isDead;
	}

	// Makes sure newly generated food is not already on top of snake
	method bool overlap(Segment food) {
		var bool ol;
		var Segment currentSeg;

		let ol = 0;
		let currentSeg = snakeHead;

		while(~(currentSeg = null)) {
			let ol = ol | currentSeg.collide(food);
			let currentSeg = currentSeg.next();
		}

		return ol;
	}

	// Draws snake and checks if snake has hit itself
	method void drawSnake() {
		var Segment currentSeg;

		do snakeHead.draw();
		let currentSeg = snakeHead.next();

		while(~(currentSeg = null)) {
			let isDead = isDead | currentSeg.collide(snakeHead);
			do currentSeg.draw();
			let currentSeg = currentSeg.next();
		}

		return;

	}

	// Moves snake in specified direction, growing it if it eats food
	method void move(char direction, Segment food) {
		var int x;
		var int y;
		var Segment tmp;

		let x = 0;
		let y = 0;

		let ateFood = 0;
		let isDead = 0;

		//Change based on direction
		if (direction = 87) { //w
			let y = -1;							
		} else { 
			if(direction = 65) { //a
				let x = -1;
			} else {
				if(direction = 83) { //s
					let y = 1;
				} else { // d
					let x = 1;
				}
			}
		}

		let tmp = Segment.new(snakeHead.getX() + x, snakeHead.getY() + y, null);


		//Check if snake is trying to move off the screen and kills if is
		if ( (tmp.getX() > -1) & (tmp.getY() > -1) & (tmp.getX() < 64) & (tmp.getY() < 32)) { 
			// adds TMP to front of snake
			do tmp.add(snakeHead);
			let snakeHead = tmp;
		} else {
			let isDead = -1;
			do tmp.dispose();
		}

		if ((food = null) | tmp.collide(food)) {
			//Leaves tail if food is eaten
			let ateFood = -1;
		} else {
			// Deletes tail if no food eaten
			let tmp = snakeTail.previous();
			do tmp.setNext(null);
			do snakeTail.dispose();
			let snakeTail = tmp;
		}
		return;
	}

	// Deletes snake and all segments corresponding to snake
	method void dispose() {
		var Segment currentSeg;
		var Segment tmp;
		let currentSeg = snakeHead;

		while(~(currentSeg = null)) {
			// Deletes all segments
			let tmp = currentSeg;
			let currentSeg = currentSeg.next();
			do tmp.dispose();
		}

		do Memory.deAlloc(this);
		return;
	}
}