class Snake {

	field Segment snakeHead;
	field Segment snakeTail;

	/** Constructs a new snake */
	constructor Snake new() {
		var int i;

		// Create snake head
		let snakeHead = Segment.new(30, 16, null);
		let snakeTail = snakeHead;

		let i = 1;

		// Create the rest of the snake
		while(i < 5) {
			do snakeTail.add(Segment.new(30 + i, 16, null));
			let snakeTail = snakeTail.next();
			let i = i + 1;
		}

		return this;
	}

	method void drawSnake() {
		var Segment currentSeg;
		let currentSeg = snakeHead;

		while(~(currentSeg = null)) {
			
			// CHECK FOR COLLISION HERE

			do currentSeg.draw();
			let currentSeg = currentSeg.next();
		}

		return;


/*
		while (i > 0) {
			let snake[i] = snake [i - 1];

			if (snake[i].collide(tmp)) {
				let collision = -1;
			}

			let i = i + 1;
		}

		let snake[0] = tmp;
*/

	}

	method void move(char direction) {
		var int x;
		var int y;
		var Segment tmp;


		let x = 0;
		let y = 0;

		//Change based on direction
		if (direction = 87) { //w
			let y = -1;							
		} else { 
			if(direction = 65) { //a
				let x = -1;
			} else {
				if(direction = 83) { //s
					let y = 1;
				} else { // d
					let x = 1;
				}
			}
		}

		//Check if snake is trying to move off the screen
		if ( ((snakeHead.getX() + x) > -1) & ((snakeHead.getY() + y) > -1) & ((snakeHead.getX() + x) < 64) & ((snakeHead.getY() + y) < 32)) { 
			
		} else {
			return;
		}

		// Delete the tail
		let tmp = snakeTail.previous();
		do tmp.setNext(null);
		do snakeTail.dispose();
		let snakeTail = tmp;
	
		// Add new head
		let tmp = Segment.new(snakeHead.getX() + x, snakeHead.getY() + y, snakeHead);
		do tmp.add(snakeHead);
		let snakeHead = tmp;

		return;
	}

	method void addSegment() {
		return;
	}
	
}